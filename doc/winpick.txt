*winpick.txt*                             Plugin that helps with picking windows

==============================================================================
CONTENTS                                                               *winpick*

    1. Usage                  |winpick-usage|
        I. API                |winpick-api|
    2. Options                |winpick-options|

==============================================================================
USAGE                                                            *winpick-usage*

This plugin is a single-function library that helps with picking a window
inside Neovim.

Basically, it shows visual cues with labels assigned to them. Meanwhile, it
also prompts the user with a label. Once the user presses the respective key
to a label, the function returns the selected window's ID, or `nil` if no
window is selected.

------------------------------------------------------------------------------
API                                                                |winpick-api|

setup({opts})                                                    *winpick.setup*
                Sets global options. For default values, see |winpick-options|.

                Example: >

                    winpick.setup({
                        border = "none",
                        filter = function(_, bufnr)
                            local buftype = vim.api.nvim_buf_get_option(bufnr, "buftype")

                            return vim.tbl_contains({ "quickfix", "terminal" }, buftype)
                        end,
                    })

                    print(selected_win)
<
                Parameters:~
                    {opts}        (table) Options to set global options for
                                  this run. See |winpick-options|.

select({opts})                                                 *winpick.select*
                Prompts the user for a key while showing visual cues

                Example: >

                    local winid, bufnr = winpick.select()

                    -- Focus the selected window and print its buffer ID.
                    if winid then
                        vim.api.nvim_set_current_win(selected_win)
                        print(bufnr)
                    end
<
                Parameters:~
                    {opts}        (table) Options to override global options
                                  for this run. See |winpick-options|.

                Return:~
                    (winid, bufnr) IDs for the selected window and its buffer.

defaults                                                     *winpick-defaults*
        A read-only table containing the default setup values. Useful for
        reusing those values even when they have been overriden.

==============================================================================
OPTIONS                                                        *winpick-options*

    • border (string) Style of visual cues' borders. Defaults to `double`.

    • filter (function) Predicate function that receives a target window's
    corresponding ID and buffer ID and returns whether that window is eligible
    for being picked. Defaults to ignoring |preview-window| and |quickfix|.

    • format_label (function) Function that formats the labels for visual
    cues. It receives the target window ID as first parameter and the
    corresponding label for the visual cue (A, B, C, etc). Defaults to
    printing the respective label and the buffer name, if any.
